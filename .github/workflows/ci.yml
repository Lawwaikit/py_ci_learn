name: Python CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: [ "main" ]

jobs:
  test-lint-coverage:
    runs-on: ubuntu-latest
    
    steps:
      # 1. 拉取代码
      - name: Checkout Code
        uses: actions/checkout@v5

      # 2. 设置Python环境
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # 3. 安装依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # 4. 安装项目
      - name: Install project
        run: pip install -e .

      # 5. 运行测试
      - name: Run tests with coverage
        run: |
          PYTHONPATH=. pytest --cov=app --cov-report=xml --cov-report=term
        
      # 6. flake8检查
      - name: Lint code
        run: flake8 app tests --max-line-length=120

#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v4
#        with:
#          files: coverage.xml
#          fail_ci_if_error: true
#          token: ${{ secrets.CODECOV_TOKEN }}

  docker-build-push:
    needs: test-lint-coverage
    runs-on: ubuntu-latest
    steps:
      # 1. 拉取代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 登录到Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # 3. 设置 buildx（支持多平台构建）
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4.生成镜像版本号
      - name: Generate version
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "检测到 Git Tag: $VERSION"
          elif [[ -n "${GITHUB_SHA}" ]]; then
            VERSION=$(echo "${GITHUB_SHA}" | cut -c1-7)
            echo "使用 Commit SHA: $VERSION"
          else
            VERSION=$(date +'%Y%m%d%H%M%S')
            echo "使用 时间戳: $VERSION"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # 构建并推送镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/py_ci_demo:latest
            ${{ secrets.DOCKER_USERNAME }}/py_ci_demo:${{ env.VERSION }}